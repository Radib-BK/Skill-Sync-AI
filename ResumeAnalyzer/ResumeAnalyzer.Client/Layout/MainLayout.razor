@inherits LayoutComponentBase

<div class="app-layout">
    <!-- Top Bar with Hamburger (Mobile Only) -->
    <div class="top-bar">
        <div class="brand">
            <img src="skillsync_icon.png" alt="Skill-Sync AI" class="brand-icon" />
            <span class="brand-text">Skill-Sync AI</span>
        </div>
        <button class="hamburger" @onclick="ToggleSidebar">
            <span></span>
            <span></span>
            <span></span>
        </button>
    </div>

    <!-- Sidebar -->
    <div class="sidebar @(sidebarOpen ? "open" : "")">
        <div class="sidebar-header">
            <div class="brand-desktop">
                <img src="skillsync_icon.png" alt="Skill-Sync AI" class="brand-icon" />
                <span class="brand-text">Skill-Sync AI</span>
            </div>
        </div>

        <nav class="nav-menu">
            <NavLink class="nav-item" href="" Match="NavLinkMatch.All" @onclick="CloseSidebar">
                <span class="nav-icon">📁</span>
                <span>Upload</span>
            </NavLink>
            <NavLink class="nav-item" href="results" @onclick="CloseSidebar">
                <span class="nav-icon">📊</span>
                <span>Results</span>
            </NavLink>
            <NavLink class="nav-item" href="history" @onclick="CloseSidebar">
                <span class="nav-icon">📜</span>
                <span>History</span>
            </NavLink>
        </nav>

        <div class="user-section">
            @if (isAuthenticated)
            {
                <div class="user-card">
                    <div class="user-avatar">
                        <span>👨‍💻</span>
                    </div>
                    <div class="user-info">
                        <div class="username">@currentUser?.Username</div>
                        <div class="status">
                            <span class="status-dot"></span>
                            Online
                        </div>
                    </div>
                </div>
                <button class="logout-btn" @onclick="HandleLogout">
                    <span class="logout-icon">🚪</span>
                    Logout
                </button>
            }
            else
            {
                <div class="auth-buttons">
                    <NavLink class="auth-btn" href="login" @onclick="CloseSidebar">
                        <span>🔐</span>
                        Login
                    </NavLink>
                    <NavLink class="auth-btn" href="register" @onclick="CloseSidebar">
                        <span>✨</span>
                        Register
                    </NavLink>
                </div>
            }
        </div>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        @Body
    </div>

    <!-- Mobile Overlay -->
    <div class="overlay @(sidebarOpen ? "active" : "")" @onclick="CloseSidebar"></div>
</div>

@using ResumeAnalyzer.Client.Services
@using ResumeAnalyzer.Shared.Models
@inject IAuthService AuthService
@inject NavigationManager Navigation
@implements IDisposable

@code {
    private bool sidebarOpen = false;
    private bool isAuthenticated = false;
    private UserSession? currentUser;

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthenticationStatus();
        Navigation.LocationChanged += OnLocationChanged;
    }

    private async void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        await CheckAuthenticationStatus();
    }

    private async Task CheckAuthenticationStatus()
    {
        isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (isAuthenticated)
        {
            currentUser = await AuthService.GetCurrentUserAsync();
        }
        else
        {
            currentUser = null;
        }
        StateHasChanged();
    }

    private void ToggleSidebar()
    {
        sidebarOpen = !sidebarOpen;
    }

    private void CloseSidebar()
    {
        sidebarOpen = false;
    }

    private async Task HandleLogout()
    {
        await AuthService.LogoutAsync();
        isAuthenticated = false;
        currentUser = null;
        CloseSidebar();
        Navigation.NavigateTo("", forceLoad: true);
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
    }
}
