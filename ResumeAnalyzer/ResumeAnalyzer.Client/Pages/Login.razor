@page "/login"
@using ResumeAnalyzer.Client.Services
@using ResumeAnalyzer.Shared.Models
@inject IAuthService AuthService
@inject NavigationManager Navigation

<PageTitle>Login - Skill-Sync AI</PageTitle>

<div class="ai-page-container">
    <div class="animated-background">
        <div class="particles"></div>
        <div class="neural-network">
            <div class="node"></div>
            <div class="node"></div>
            <div class="node"></div>
            <div class="node"></div>
            <div class="node"></div>
            <div class="connection"></div>
            <div class="connection"></div>
            <div class="connection"></div>
        </div>
    </div>

    <div class="auth-container">
        <div class="auth-card">
            <div class="auth-header">
                <h1 class="auth-title">
                    <span class="title-icon">ü§ñ</span>
                    Login to Skill-Sync AI
                </h1>
                <p class="auth-subtitle">Access your AI-powered resume analysis</p>
            </div>

            <EditForm Model="@loginRequest" OnValidSubmit="@HandleLogin">
                <DataAnnotationsValidator />
                
                <div class="form-group">
                    <label for="username">Username</label>
                    <InputText id="username" @bind-Value="loginRequest.Username" class="form-input" placeholder="Enter your username" />
                    <ValidationMessage For="@(() => loginRequest.Username)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label for="password">Password</label>
                    <InputText id="password" @bind-Value="loginRequest.Password" type="password" class="form-input" placeholder="Enter your password" />
                    <ValidationMessage For="@(() => loginRequest.Password)" class="validation-message" />
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="error-message">
                        <span class="error-icon">‚ö†Ô∏è</span>
                        @errorMessage
                    </div>
                }

                <button type="submit" class="auth-btn" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="loading-spinner"></span>
                        <span>Logging in...</span>
                    }
                    else
                    {
                        <span>Login</span>
                    }
                </button>
            </EditForm>

            <div class="auth-footer">
                <p>Don't have an account? <a href="register" class="auth-link">Register here</a></p>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginRequest loginRequest = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            var result = await AuthService.LoginAsync(loginRequest);
            
            if (result.Success)
            {
                Navigation.NavigateTo("");
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Login failed: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}

<style>
    .auth-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        padding: 2rem;
        position: relative;
        z-index: 10;
    }

    .auth-card {
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border-radius: 20px;
        padding: 3rem;
        width: 100%;
        max-width: 450px;
        border: 1px solid rgba(0, 212, 255, 0.3);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        position: relative;
        overflow: hidden;
    }

    .auth-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(45deg, rgba(0, 212, 255, 0.1), rgba(255, 0, 128, 0.1));
        border-radius: 20px;
        z-index: -1;
    }

    .auth-header {
        text-align: center;
        margin-bottom: 2rem;
    }

    .auth-title {
        font-family: 'Orbitron', monospace;
        font-size: 2rem;
        font-weight: 700;
        color: #00d4ff;
        margin-bottom: 0.5rem;
        text-shadow: 0 0 20px rgba(0, 212, 255, 0.5);
    }

    .title-icon {
        font-size: 2.5rem;
        margin-right: 0.5rem;
    }

    .auth-subtitle {
        color: #c0c0c0;
        font-size: 1rem;
        opacity: 0.9;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-group label {
        display: block;
        color: #00d4ff;
        font-weight: 600;
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
    }

    .form-input {
        width: 100%;
        padding: 0.8rem;
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(0, 212, 255, 0.3);
        border-radius: 10px;
        color: #ffffff;
        font-size: 1rem;
        transition: all 0.3s ease;
    }

    .form-input:focus {
        outline: none;
        border-color: #00d4ff;
        box-shadow: 0 0 10px rgba(0, 212, 255, 0.3);
        background: rgba(255, 255, 255, 0.15);
    }

    .form-input::placeholder {
        color: rgba(255, 255, 255, 0.5);
    }

    .auth-btn {
        width: 100%;
        padding: 1rem;
        background: linear-gradient(45deg, #00d4ff, #ff0080);
        border: none;
        border-radius: 10px;
        color: #ffffff;
        font-size: 1.1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        margin-top: 1rem;
    }

    .auth-btn:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(0, 212, 255, 0.4);
    }

    .auth-btn:disabled {
        opacity: 0.7;
        cursor: not-allowed;
    }

    .loading-spinner {
        width: 20px;
        height: 20px;
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-top: 2px solid #ffffff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .error-message {
        background: rgba(255, 0, 0, 0.1);
        border: 1px solid rgba(255, 0, 0, 0.3);
        border-radius: 8px;
        padding: 0.8rem;
        margin-bottom: 1rem;
        color: #ff6b6b;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .error-icon {
        font-size: 1.2rem;
    }

    .validation-message {
        color: #ff6b6b;
        font-size: 0.8rem;
        margin-top: 0.3rem;
    }

    .auth-footer {
        text-align: center;
        margin-top: 2rem;
        padding-top: 1rem;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
    }

    .auth-link {
        color: #00d4ff;
        text-decoration: none;
        font-weight: 600;
        transition: color 0.3s ease;
    }

    .auth-link:hover {
        color: #ffffff;
        text-shadow: 0 0 10px rgba(0, 212, 255, 0.5);
    }

    @@media (max-width: 768px) {
        .auth-container {
            padding: 1rem;
        }

        .auth-card {
            padding: 2rem;
        }

        .auth-title {
            font-size: 1.5rem;
        }

        .title-icon {
            font-size: 2rem;
        }
    }
</style> 