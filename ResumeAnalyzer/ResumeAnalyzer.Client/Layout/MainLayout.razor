@inherits LayoutComponentBase

<div class="app-layout">
    <!-- Top Navbar -->
    <nav class="navbar">
        <div class="navbar-content">
            <!-- Hamburger Menu (Mobile Only) -->
            <button class="hamburger-menu" @onclick="ToggleSidebar">
                <span></span>
                <span></span>
                <span></span>
            </button>
            
            <!-- Logo/Brand -->
            <div class="navbar-brand">
                <span class="brand-text">Skill-Sync AI</span>
            </div>
            
            <!-- Right Side Links -->
            <div class="navbar-right">
                @if (!isAuthenticated)
                {
                    <NavLink href="login" class="nav-link">Login</NavLink>
                    <NavLink href="register" class="nav-link">Register</NavLink>
                }
            </div>
        </div>
    </nav>

    <!-- Sidebar -->
    <div class="sidebar @(sidebarOpen ? "open" : "")">
        <div class="sidebar-content">
            <!-- Sidebar Header -->
            <div class="sidebar-header">
                <div class="sidebar-title">Analyzer</div>
                <div class="sidebar-subtitle">Discover Your Job Compatibility</div>
            </div>
            
            <!-- Navigation Links -->
            <nav class="sidebar-nav">
                <ul class="nav-list">
                    <li>
                        <NavLink href="" Match="NavLinkMatch.All" class="nav-item" @onclick="CloseSidebar">
                            <span class="nav-icon">📁</span>
                            <span>Upload</span>
                        </NavLink>
                    </li>
                    <li>
                        <NavLink href="results" class="nav-item" @onclick="CloseSidebar">
                            <span class="nav-icon">📊</span>
                            <span>Results</span>
                        </NavLink>
                    </li>
                    <li>
                        <NavLink href="history" class="nav-item" @onclick="CloseSidebar">
                            <span class="nav-icon">📜</span>
                            <span>History</span>
                        </NavLink>
                    </li>
                </ul>
            </nav>
            
            <!-- User Section (Only when authenticated) -->
            @if (isAuthenticated)
            {
                <div class="user-section">
                    <div class="user-card">
                        <div class="user-avatar">👨‍💻</div>
                        <div class="user-info">
                            <div class="username">@currentUser?.Username</div>
                            <div class="status">
                                <span class="status-dot"></span>
                                Online
                            </div>
                        </div>
                    </div>
                    <button class="logout-btn" @onclick="HandleLogout">
                        🔓 Logout
                    </button>
                </div>
            }
            
            <!-- Copyright Footer -->
            <div class="sidebar-footer">
                <div class="copyright-text">
                    Radib Bin Kabir © 2025
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <main class="main-content">
        @Body
    </main>

    <!-- Mobile Overlay -->
    <div class="sidebar-overlay @(sidebarOpen ? "active" : "")" @onclick="CloseSidebar"></div>
</div>

@using ResumeAnalyzer.Client.Services
@using ResumeAnalyzer.Shared.Models
@inject IAuthService AuthService
@inject NavigationManager Navigation
@implements IDisposable

@code {
    private bool sidebarOpen = false;
    private bool isAuthenticated = false;
    private UserSession? currentUser;

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthenticationStatus();
        Navigation.LocationChanged += OnLocationChanged;
    }

    private async void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        await CheckAuthenticationStatus();
    }

    private async Task CheckAuthenticationStatus()
    {
        isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (isAuthenticated)
        {
            currentUser = await AuthService.GetCurrentUserAsync();
        }
        else
        {
            currentUser = null;
        }
        StateHasChanged();
    }

    private void ToggleSidebar()
    {
        sidebarOpen = !sidebarOpen;
    }

    private void CloseSidebar()
    {
        sidebarOpen = false;
    }

    private async Task HandleLogout()
    {
        await AuthService.LogoutAsync();
        isAuthenticated = false;
        currentUser = null;
        CloseSidebar();
        Navigation.NavigateTo("", forceLoad: true);
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
    }
}
